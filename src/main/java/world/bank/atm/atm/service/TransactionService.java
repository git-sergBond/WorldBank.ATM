package world.bank.atm.atm.service;

import lombok.RequiredArgsConstructor;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.Message;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import world.bank.atm.atm.dto.TransactionDto;

@Service
@RequiredArgsConstructor
public class TransactionService {

    private final KafkaTemplate<Object, Message<Object>> kafkaTemplate;

    @Value("${kafka.topics.worldBank.request}")
    private String topicWorldBankRequest;

    public void pay(TransactionDto transactionDto) {
        Message<Object> msg = MessageBuilder.withPayload((Object) transactionDto) // TODO is this ok? Can i convert TransactionDto to Object? Is exists more better way?
                .setHeader(KafkaHeaders.CORRELATION_ID, 1) // TODO how to make MessageID to CorrelationID ? (kafka_partitionId=2, id=dc28b107-2833-2fa5-6627-8d03d81044ee) is this ID is MessageId generated by broker?
                .setHeader(KafkaHeaders.PARTITION_ID, 2)
                .build();
        ListenableFuture<SendResult<Object, Message<Object>>> listenableFuture =  kafkaTemplate.send(topicWorldBankRequest, msg);
        listenableFuture.addCallback(new ListenableFutureCallback<SendResult<Object, Message<Object>>>() {
            @Override
            public void onSuccess(SendResult<Object, Message<Object>> objectMessageSendResult) {
                System.out.println("success " + objectMessageSendResult.getRecordMetadata().offset() + "|" + objectMessageSendResult.getProducerRecord().toString());
            }

            @Override
            public void onFailure(Throwable throwable) {
                System.out.println("failure " + throwable.getMessage());
            }
        });
    }
}
